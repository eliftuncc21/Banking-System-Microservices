services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: example
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  config-server:
    build: ./config-server
    container_name: config-server
    restart: always
    ports:
      - "8888:8888"
    environment:
      PROFILES_ACTIVE: native
    volumes:
      - ./config-server/configurations:/configurations
    command: [ "java", "-jar", "config-server.jar" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      CLOUD_CONFIG_URI: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    container_name: auth-service
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      CLOUD_CONFIG_URI: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build: ./user-service
    container_name: user-service
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      CLOUD_CONFIG_URI: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  account-service:
    build: ./account-service
    container_name: account-service
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      CLOUD_CONFIG_URI: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  credit-card-service:
    build: ./credit-card-service
    container_name: credit-card-service
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CLOUD_CONFIG_URI: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service:
    build: ./transaction-service
    container_name: transaction-service
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      CLOUD_CONFIG_URI: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  pgdata: